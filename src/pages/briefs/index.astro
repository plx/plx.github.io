---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import ContentCard from "@components/ContentCard.astro";
import Link from "@components/Link.astro";
import { getBriefCardProps } from "@lib/contentCardHelpers";
import { extractCategoryFromSlug, getCategory } from "@lib/category";
import { BRIEFS } from "@consts";

const collection = (await getCollection("briefs"))
  .filter(brief => !brief.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

const briefs = await Promise.all(
  collection.map(async (item) => {
    const { Content } = await item.render();
    return { ...item, Content };
  })
);

type BriefList = CollectionEntry<"briefs">[];
type Brief = CollectionEntry<"briefs">;

type BriefsByCategory = {
  [category: string]: {
    briefs: BriefList;
    metadata: ReturnType<typeof getCategory>;
  };
}

// Group briefs by category
const briefs_by_category: BriefsByCategory = briefs.reduce((acc: BriefsByCategory, brief) => {
    const categorySlug = extractCategoryFromSlug(brief.slug);
    const categoryKey = categorySlug || 'uncategorized';
    
    if (!acc[categoryKey]) {
      const metadata = categorySlug 
        ? getCategory(categorySlug, `src/content/briefs/${categorySlug}`)
        : { slug: 'uncategorized', displayName: 'Uncategorized', sortPriority: -1 };
      
      acc[categoryKey] = {
        briefs: [],
        metadata
      };
    }
    
    acc[categoryKey].briefs.push(brief);
    return acc;
  }, {});

// Sort categories by priority, then alphabetically
const brief_categories = Object.keys(briefs_by_category)
    .sort((a, b) => {
      const a_priority = briefs_by_category[a].metadata.sortPriority || 0;
      const b_priority = briefs_by_category[b].metadata.sortPriority || 0;
      
      if (a_priority !== b_priority) {
        return b_priority - a_priority;
      }
      
      // alphabetic (ascending) as fallback
      return briefs_by_category[a].metadata.displayName.localeCompare(
        briefs_by_category[b].metadata.displayName
      );
    });

---

<PageLayout title={BRIEFS.TITLE} description={BRIEFS.DESCRIPTION}>
  <Container>
    <div class="space-y-10">
      <div class="animate font-semibold text-black dark:text-white">
        Briefs
      </div>
      <ul class="flex flex-col space-y-4">
        { 
          brief_categories.map(categoryKey => {
            const { briefs: categoryBriefs, metadata } = briefs_by_category[categoryKey];
            const hasCategory = categoryKey !== 'uncategorized';
            
            return (
              <li>
                <div class="flex items-center gap-3 mb-2">
                  <h5 class="font-semibold text-black dark:text-white">
                    { metadata.displayName }
                  </h5>
                  {hasCategory && (
                    <span class="text-sm">
                      <Link href={`/briefs/${metadata.slug}`}>
                        View all â†’
                      </Link>
                    </span>
                  )}
                </div>
                {metadata.description && (
                  <p class="text-sm text-gray-600 dark:text-gray-400 mb-3">
                    {metadata.description}
                  </p>
                )}
                <ul class="flex flex-col gap-4">
                  {
                    categoryBriefs.map((brief: Brief) => (
                      <li class="animate">
                        <ContentCard {...getBriefCardProps(brief, false, 3)}/>
                      </li>
                    ))
                  }
                </ul>
              </li>
            );
          })
        }
      </ul>
    </div>
  </Container>
</PageLayout>